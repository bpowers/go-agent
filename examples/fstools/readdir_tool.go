// Code generated by funcschema. DO NOT EDIT.

package fstools

import (
	"context"
	"encoding/json"
)

// ReadDirToolDef is the MCP tool definition for the ReadDir function
const ReadDirToolDef = `{
  "name": "read_dir",
  "description": "Function ReadDir",
  "inputSchema": {
    "type": "object",
    "properties": {},
    "additionalProperties": false,
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "error": {
        "type": [
          "string",
          "null"
        ]
      },
      "files": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "is_dir": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            }
          },
          "required": [
            "name",
            "is_dir",
            "size"
          ],
          "additionalProperties": false
        }
      }
    },
    "required": [
      "files",
      "error"
    ],
    "additionalProperties": false
  }
}`

// ReadDirTool is a generic wrapper that accepts JSON input and returns JSON output
func ReadDirTool(ctx context.Context, input string) string {
	// No input parameters needed, ignore input JSON

	// Call the actual function with context only
	result := ReadDir(ctx)

	// Marshal the result
	respBytes, err := json.Marshal(result)
	if err != nil {
		errStr := "failed to marshal response: " + err.Error()
		errResp := ReadDirResult{
			Error: &errStr,
		}
		respBytes, _ := json.Marshal(errResp)
		return string(respBytes)
	}

	return string(respBytes)
}
